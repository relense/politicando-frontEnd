{"ast":null,"code":"import _regeneratorRuntime from \"/Users/miguelfurtado/Documents/Projetos/politicando/policando-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/miguelfurtado/Documents/Projetos/politicando/policando-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as types from './actionTypes';\nexport function receiveParties(json) {\n  return {\n    type: types.RECEIVE_PARTIES,\n    parties: json.parties\n  };\n}\nexport function fetchParties() {\n  return _fetchParties.apply(this, arguments);\n}\n\nfunction _fetchParties() {\n  _fetchParties = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", function (dispatch) {\n              fetch('http://localhost:4000/partidos.json', {\n                method: 'GET',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json'\n                }\n              }).then(function (response) {\n                return response.json().then(function (data) {\n                  return {\n                    data: data,\n                    status: response.status\n                  };\n                });\n              }).then(function (response) {\n                if (response.status === 200) {\n                  dispatch(receiveParties(response.data));\n                } else {\n                  var flash = {\n                    type: 'error',\n                    title: 'Error getting task list',\n                    content: 'There was an error getting the task list. Please try again.'\n                  };\n                  dispatch({\n                    type: \"DISPLAY_FLASH\",\n                    data: flash\n                  });\n                }\n              });\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _fetchParties.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/miguelfurtado/Documents/Projetos/politicando/policando-frontend/src/actions/partiesActions.js"],"names":["types","receiveParties","json","type","RECEIVE_PARTIES","parties","fetchParties","dispatch","fetch","method","headers","Accept","then","response","data","status","flash","title","content"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AAEA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AACnC,SAAO;AAAEC,IAAAA,IAAI,EAAEH,KAAK,CAACI,eAAd;AAA+BC,IAAAA,OAAO,EAAEH,IAAI,CAACG;AAA7C,GAAP;AACD;AAED,gBAAsBC,YAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA,6CACI,UAACC,QAAD,EAAc;AACjBC,cAAAA,KAAK,CAAC,qCAAD,EAAwC;AAC3CC,gBAAAA,MAAM,EAAE,KADmC;AAE3CC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,MAAM,EAAE,kBADD;AAEP,kCAAgB;AAFT;AAFkC,eAAxC,CAAL,CAOGC,IAPH,CAOQ,UAAAC,QAAQ;AAAA,uBACVA,QAAQ,CAACX,IAAT,GAAgBU,IAAhB,CAAqB,UAAAE,IAAI;AAAA,yBAAK;AAC1BA,oBAAAA,IAAI,EAAEA,IADoB;AAE1BC,oBAAAA,MAAM,EAAEF,QAAQ,CAACE;AAFS,mBAAL;AAAA,iBAAzB,CADU;AAAA,eAPhB,EAaGH,IAbH,CAaQ,UAAAC,QAAQ,EAAI;AACd,oBAAGA,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBR,kBAAAA,QAAQ,CAACN,cAAc,CAACY,QAAQ,CAACC,IAAV,CAAf,CAAR;AACH,iBAFD,MAEK;AACD,sBAAIE,KAAK,GAAG;AACRb,oBAAAA,IAAI,EAAE,OADE;AAERc,oBAAAA,KAAK,EAAE,yBAFC;AAGRC,oBAAAA,OAAO,EAAE;AAHD,mBAAZ;AAKAX,kBAAAA,QAAQ,CAAC;AAACJ,oBAAAA,IAAI,EAAE,eAAP;AAAwBW,oBAAAA,IAAI,EAAEE;AAA9B,mBAAD,CAAR;AACH;AACJ,eAxBH;AAyBH,aA3BE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import * as types from './actionTypes';\n\nexport function receiveParties(json) {\n  return { type: types.RECEIVE_PARTIES, parties: json.parties };\n}\n\nexport async function fetchParties() {\n    return (dispatch) => {\n        fetch('http://localhost:4000/partidos.json', {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n        })\n          .then(response =>\n              response.json().then(data => ({\n                  data: data,\n                  status: response.status\n              }))\n          )\n          .then(response => {\n              if(response.status === 200){\n                  dispatch(receiveParties(response.data))\n              }else{\n                  var flash = {\n                      type: 'error',\n                      title: 'Error getting task list',\n                      content: 'There was an error getting the task list. Please try again.'\n                  }\n                  dispatch({type: \"DISPLAY_FLASH\", data: flash})\n              }\n          });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}